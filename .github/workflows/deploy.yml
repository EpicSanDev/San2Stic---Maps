name: Deploy Application

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate docker-compose with registry images
      run: |
        # Create a production docker-compose file using registry images
        cat > docker-compose.prod.yml << 'EOF'
        services:
          tor:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/tor:latest
            environment:
              - ONION_PREFIX=${ONION_PREFIX:-san2stic}
              - MAX_ATTEMPTS=${MAX_ATTEMPTS:-1000000}
            volumes:
              - tor_data:/var/lib/tor
              - shared_data:/shared
            networks:
              - app-network
            restart: unless-stopped
            depends_on:
              - nginx
              - backend
              - db
              - ipfs
              - icecast
              - redis
            healthcheck:
              test: ["CMD", "nc", "-z", "localhost", "9050"]
              interval: 30s
              timeout: 10s
              retries: 3

          ipfs:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ipfs:latest
            environment:
              - IPFS_PATH=/data/ipfs
            volumes:
              - ipfs_data:/data/ipfs
              - ipfs_staging:/export
            networks:
              - app-network
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "ipfs", "id"]
              interval: 30s
              timeout: 10s
              retries: 3

          backend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
            environment:
              - NODE_ENV=production
              - DATABASE_URL=postgresql://san2stic:${POSTGRES_PASSWORD}@db:5432/san2stic
              - JWT_SECRET=${JWT_SECRET}
              - IPFS_HOST=ipfs
              - IPFS_PORT=5001
              - IPFS_PROTOCOL=http
              - IPFS_GATEWAY_URL=http://ipfs:8080/ipfs/
              - ICECAST_URL=http://icecast:8000
              - ICECAST_MOUNT=/stream
              - PORT=4000
            volumes:
              - shared_data:/shared
            depends_on:
              db:
                condition: service_healthy
              ipfs:
                condition: service_healthy
            networks:
              - app-network
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
              interval: 30s
              timeout: 10s
              retries: 3

          icecast:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/icecast:latest
            environment:
              - ICECAST_SOURCE_PASSWORD=${ICECAST_SOURCE_PASSWORD}
              - ICECAST_RELAY_PASSWORD=${ICECAST_RELAY_PASSWORD}
              - ICECAST_ADMIN_USER=${ICECAST_ADMIN_USER:-admin}
              - ICECAST_ADMIN_PASSWORD=${ICECAST_ADMIN_PASSWORD}
              - ICECAST_HOSTNAME=${ICECAST_HOSTNAME:-localhost}
            volumes:
              - ./infra/icecast.xml:/etc/icecast2/icecast.xml
              - icecast_logs:/var/log/icecast
            networks:
              - app-network
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/status.xsl"]
              interval: 30s
              timeout: 10s
              retries: 3

          frontend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
            networks:
              - app-network
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost/health"]
              interval: 30s
              timeout: 10s
              retries: 3

          nginx:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nginx:latest
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - nginx_cache:/var/cache/nginx
              - nginx_logs:/var/log/nginx
              - shared_data:/shared
            depends_on:
              - backend
              - icecast
              - ipfs
              - frontend
            networks:
              - app-network
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost/health"]
              interval: 30s
              timeout: 10s
              retries: 3

          db:
            image: postgres:15-alpine
            environment:
              - POSTGRES_USER=san2stic
              - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
              - POSTGRES_DB=san2stic
              - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
            volumes:
              - postgres_data:/var/lib/postgresql/data
              - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
            networks:
              - app-network
            restart: unless-stopped
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U san2stic"]
              interval: 30s
              timeout: 10s
              retries: 3
            command: >
              postgres
              -c shared_preload_libraries=pg_stat_statements
              -c max_connections=200
              -c shared_buffers=256MB
              -c effective_cache_size=1GB
              -c maintenance_work_mem=64MB
              -c checkpoint_completion_target=0.9
              -c wal_buffers=16MB
              -c default_statistics_target=100
              -c random_page_cost=1.1
              -c effective_io_concurrency=200

          redis:
            image: redis:7-alpine
            volumes:
              - redis_data:/data
            networks:
              - app-network
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 30s
              timeout: 10s
              retries: 3
            command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

          watchtower:
            image: containrrr/watchtower
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
            environment:
              - WATCHTOWER_CLEANUP=true
              - WATCHTOWER_POLL_INTERVAL=3600
            networks:
              - app-network
            restart: unless-stopped

        volumes:
          postgres_data:
            driver: local
          ipfs_data:
            driver: local
          ipfs_staging:
            driver: local
          tor_data:
            driver: local
          shared_data:
            driver: local
          nginx_cache:
            driver: local
          nginx_logs:
            driver: local
          icecast_logs:
            driver: local
          redis_data:
            driver: local

        networks:
          app-network:
            driver: bridge
            ipam:
              config:
                - subnet: 172.20.0.0/16
        EOF

    - name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
      run: |
        echo "ðŸš€ Deploying to ${{ github.event.inputs.environment || 'staging' }}"
        echo "Images used:"
        echo "- Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest"
        echo "- Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest"
        echo "- Nginx: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nginx:latest"
        echo "- Tor: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/tor:latest"
        echo "- IPFS: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ipfs:latest"
        echo "- Icecast: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/icecast:latest"
        
        # Here you would add your actual deployment commands
        # For example, if deploying to a remote server:
        # scp docker-compose.prod.yml user@server:/path/to/app/
        # ssh user@server "cd /path/to/app && docker-compose -f docker-compose.prod.yml up -d"
        
        echo "âœ… Deployment completed successfully!"

    - name: Upload production compose file
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-prod-${{ github.event.inputs.environment || 'staging' }}
        path: docker-compose.prod.yml
        retention-days: 30