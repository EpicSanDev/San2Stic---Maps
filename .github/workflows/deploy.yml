name: Deploy Application

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Use dynamic docker-compose
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "‚úÖ Using repository's docker-compose.prod.yml for production deployment"
        echo "üîç Repository: $GITHUB_REPOSITORY"
        echo "üîç Registry: ${{ env.REGISTRY }}"
        echo ""
        echo "üìã Docker-compose configuration preview:"
        echo "Image URLs will be resolved as:"
        echo "  - ghcr.io/$GITHUB_REPOSITORY/backend:latest"
        echo "  - ghcr.io/$GITHUB_REPOSITORY/frontend:latest"
        echo "  - ghcr.io/$GITHUB_REPOSITORY/nginx:latest"
        echo "  - ghcr.io/$GITHUB_REPOSITORY/tor:latest"
        echo "  - ghcr.io/$GITHUB_REPOSITORY/ipfs:latest"
        echo "  - ghcr.io/$GITHUB_REPOSITORY/icecast:latest"
        echo ""
        echo "üìÑ Raw docker-compose.prod.yml content (first 30 lines):"
        head -30 docker-compose.prod.yml
    - name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "üöÄ Deploying to ${{ github.event.inputs.environment || 'staging' }}"
        echo "Repository: $GITHUB_REPOSITORY"
        echo "Registry: ${{ env.REGISTRY }}"
        echo ""
        echo "Images used from docker-compose.prod.yml:"
        echo "- Backend: ghcr.io/$GITHUB_REPOSITORY/backend:latest"
        echo "- Frontend: ghcr.io/$GITHUB_REPOSITORY/frontend:latest"
        echo "- Nginx: ghcr.io/$GITHUB_REPOSITORY/nginx:latest"
        echo "- Tor: ghcr.io/$GITHUB_REPOSITORY/tor:latest"
        echo "- IPFS: ghcr.io/$GITHUB_REPOSITORY/ipfs:latest"
        echo "- Icecast: ghcr.io/$GITHUB_REPOSITORY/icecast:latest"
        
        # Verify the docker-compose.prod.yml file has the correct variables substituted
        echo ""
        echo "üîç Verifying docker-compose.prod.yml variable substitution:"
        envsubst < docker-compose.prod.yml | head -20
        
        # Export the repository name for docker-compose
        export GITHUB_REPOSITORY="${{ github.repository }}"
        
        # Test that docker-compose can parse the file correctly
        echo ""
        echo "üß™ Testing docker-compose configuration:"
        docker-compose -f docker-compose.prod.yml config --quiet
        
        # Here you would add your actual deployment commands
        # For example, if deploying to a remote server:
        # scp docker-compose.prod.yml user@server:/path/to/app/
        # ssh user@server "cd /path/to/app && GITHUB_REPOSITORY=$GITHUB_REPOSITORY docker-compose -f docker-compose.prod.yml up -d"
        
        echo "‚úÖ Deployment configuration validated successfully!"

    - name: Upload production compose file
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-prod-${{ github.event.inputs.environment || 'staging' }}
        path: docker-compose.prod.yml
        retention-days: 30