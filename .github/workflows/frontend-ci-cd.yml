name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'

permissions:
  contents: read
  packages: write
  id-token: write # Si d√©ploiement sur GCP Static Hosting avec WIF

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_STATIC_BUCKET: ${{ secrets.GCP_STATIC_BUCKET }}

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
        retention-days: 30

  build-and-deploy-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: test-frontend
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build React Application
      run: |
        cd frontend
        npm run build
      env:
        CI: false
        GENERATE_SOURCEMAP: false

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    # Optional: Deploy to GCP Static Hosting
    - name: Authenticate to Google Cloud
      if: github.ref == 'refs/heads/main' && env.GCP_PROJECT_ID != ''
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

    - name: Setup Google Cloud SDK
      if: github.ref == 'refs/heads/main' && env.GCP_PROJECT_ID != ''
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Google Cloud Storage
      if: github.ref == 'refs/heads/main' && env.GCP_STATIC_BUCKET != ''
      run: |
        # Upload build files to GCS bucket
        gsutil -m rsync -d -r frontend/build gs://${{ env.GCP_STATIC_BUCKET }}
        
        # Set proper content types
        gsutil -m setmeta -h "Content-Type:text/html" gs://${{ env.GCP_STATIC_BUCKET }}/**/*.html
        gsutil -m setmeta -h "Content-Type:application/javascript" gs://${{ env.GCP_STATIC_BUCKET }}/**/*.js
        gsutil -m setmeta -h "Content-Type:text/css" gs://${{ env.GCP_STATIC_BUCKET }}/**/*.css

    # Alternative: Deploy to Netlify
    - name: Deploy to Netlify
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && secrets.NETLIFY_AUTH_TOKEN != ''
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './frontend/build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 10

    # Alternative: Deploy to Vercel  
    - name: Deploy to Vercel
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && secrets.VERCEL_TOKEN != ''
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--prod'
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ github.sha }}
        path: frontend/build/
        retention-days: 30