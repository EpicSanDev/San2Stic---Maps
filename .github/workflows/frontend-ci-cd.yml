name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
        retention-days: 30

  build-and-deploy-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: test-frontend
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build React Application
      run: |
        cd frontend
        npm run build
      env:
        CI: false
        GENERATE_SOURCEMAP: false

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    # Deploy to IPFS using Pinata
    - name: Deploy to IPFS (Pinata)
      if: github.ref == 'refs/heads/main' && secrets.PINATA_JWT != ''
      run: |
        echo "🌐 Deploying to IPFS via Pinata..."
        
        # Install IPFS CLI
        wget https://dist.ipfs.io/kubo/v0.24.0/kubo_v0.24.0_linux-amd64.tar.gz
        tar -xzf kubo_v0.24.0_linux-amd64.tar.gz
        sudo mv kubo/ipfs /usr/local/bin/
        
        # Add frontend build to IPFS
        cd frontend/build
        IPFS_HASH=$(ipfs add -r -Q .)
        echo "📎 IPFS Hash: $IPFS_HASH"
        
        # Pin to Pinata for permanent availability
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.PINATA_JWT }}" \
          -H "Content-Type: application/json" \
          -d "{\"hashToPin\":\"$IPFS_HASH\",\"pinataMetadata\":{\"name\":\"San2Stic-Frontend-${{ github.sha }}\"}}" \
          "https://api.pinata.cloud/pinning/pinByHash"
        
        echo "✅ Frontend deployed to IPFS: https://ipfs.io/ipfs/$IPFS_HASH"
        echo "🔗 Also available at: https://gateway.pinata.cloud/ipfs/$IPFS_HASH"
        
        # Save IPFS hash for later use
        echo "IPFS_HASH=$IPFS_HASH" >> $GITHUB_ENV
      env:
        PINATA_JWT: ${{ secrets.PINATA_JWT }}

    # Alternative: Deploy to Netlify
    - name: Deploy to Netlify
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && secrets.NETLIFY_AUTH_TOKEN != ''
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './frontend/build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 10

    # Alternative: Deploy to Vercel  
    - name: Deploy to Vercel
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && secrets.VERCEL_TOKEN != ''
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--prod'
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend

    # Upload build artifacts including IPFS hash
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ github.sha }}
        path: |
          frontend/build/
          ipfs-deployment.txt
        retention-days: 30

    # Create deployment summary
    - name: Create deployment summary
      if: github.ref == 'refs/heads/main'
      run: |
        echo "## 🚀 Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status | URL |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Registry | ✅ Built | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -z "${{ env.IPFS_HASH }}" ]; then
          echo "| IPFS (Decentralized) | ✅ Deployed | https://ipfs.io/ipfs/${{ env.IPFS_HASH }} |" >> $GITHUB_STEP_SUMMARY
          echo "| IPFS (Pinata Gateway) | ✅ Deployed | https://gateway.pinata.cloud/ipfs/${{ env.IPFS_HASH }} |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ ! -z "${{ secrets.NETLIFY_AUTH_TOKEN }}" ]; then
          echo "| Netlify | ✅ Deployed | Check deployment logs |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ ! -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "| Vercel | ✅ Deployed | Check deployment logs |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Decentralized Access" >> $GITHUB_STEP_SUMMARY
        echo "The frontend is now available through multiple decentralized channels:" >> $GITHUB_STEP_SUMMARY
        echo "- **IPFS Network**: Distributed across the global IPFS network" >> $GITHUB_STEP_SUMMARY
        echo "- **Content Addressing**: Immutable content with cryptographic verification" >> $GITHUB_STEP_SUMMARY
        echo "- **Censorship Resistant**: No single point of failure" >> $GITHUB_STEP_SUMMARY