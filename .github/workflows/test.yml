name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    # Backend Linting
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Lint backend code
      run: |
        cd backend
        npm run lint

    # Frontend Linting
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint

    # Dockerfile Linting
    - name: Run Hadolint (Backend Dockerfile)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: infra/Dockerfile.backend
        failure-threshold: warning

    - name: Run Hadolint (Frontend Dockerfile)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: frontend/Dockerfile
        failure-threshold: warning

    - name: Run Hadolint (Icecast Dockerfile)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: infra/Dockerfile.icecast
        failure-threshold: warning

    # Security Scanning
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    # Backend Tests
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test

    # Frontend Tests
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage
        path: |
          backend/coverage/
          frontend/coverage/
        retention-days: 30

  # Build Tests
  build-tests:
    runs-on: ubuntu-latest
    name: Build Tests
    needs: [code-quality]
    
    strategy:
      matrix:
        service:
          - name: backend
            context: .
            dockerfile: ./infra/Dockerfile.backend
          - name: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile
          - name: nginx
            context: ./docker/nginx
            dockerfile: ./docker/nginx/Dockerfile
          - name: tor
            context: ./docker/tor
            dockerfile: ./docker/tor/Dockerfile
          - name: ipfs
            context: ./docker/ipfs
            dockerfile: ./docker/ipfs/Dockerfile
          - name: icecast
            context: ./infra
            dockerfile: ./infra/Dockerfile.icecast

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Smart Contract dependencies
      if: matrix.service.name == 'backend'
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly

    - name: Compile Smart Contracts
      if: matrix.service.name == 'backend'
      run: |
        cd contracts
        forge build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: false
        tags: test-${{ matrix.service.name }}:latest
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}
        platforms: linux/amd64

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [build-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: san2stic_test
          POSTGRES_USER: san2stic
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration || echo "Integration tests not yet implemented"
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://san2stic:test_password@localhost:5432/san2stic_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_jwt_secret_for_testing_only

  # Test Summary
  test-summary:
    runs-on: ubuntu-latest
    name: Test Summary
    needs: [code-quality, unit-tests, build-tests, integration-tests]
    if: always()
    
    steps:
    - name: Generate test summary
      run: |
        echo "## Test Results 🧪" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Tests | ${{ needs.build-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.code-quality.result }}" == "success" && 
              "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.build-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "🎉 All tests passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
        fi